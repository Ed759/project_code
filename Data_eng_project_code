# Code for ETL operations on Country-GDP data

# Importing the required libraries

import requests 
from bs4 import BeautifulSoup
import pandas as pd 
import numpy as np 
import sqlite3
from datetime import datetime

def log_progress(message):
    ''' This function logs the mentioned message of a given stage of the
    code execution to a log file. Function returns nothing'''

    timestamp_format = '%Y-%h-%d-%H:%M:%S' # Year Monthname Day Hour MIn Sec
    now = datetime.now() # Get current time
    timestamp = now.strftime(timestamp_format)
    with open('./code_log.txt', 'a') as f:
        f.write(timestamp + ' : ' + message + '\n') 

def extract(url, table_attribs):
    ''' This function aims to extract the required
    information from the website and save it to a data frame. The
    function returns the data frame for further processing. '''

    page = requests.get(url).text
    data = BeautifulSoup(page, 'html.parser')
    df = pd.DataFrame(columns=table_attribs)
    table = data.find_all('tbody')
    rows = table[0].find_all('tr')
    for row in rows:
        col = row.find_all('td')
        if len(col) != 0:
            name = col[1].find('a').text if col[1].find('a') else col[1].text
            data_dict = {'Name': name,
                         'MC_USD_Billion': float(col[2].contents[0])}
            
            df1 = pd.DataFrame(data_dict, index=[0])
            df = pd.concat([df, df1], ignore_index=True)
    
    return df

df = extract('https://web.archive.org/web/20230908091635 /https://en.wikipedia.org/wiki/List_of_largest_banks', ['Name', 'MC_USD_Billion'])

def transform(df, csv_path):
    ''' This function accesses the CSV file for exchange rate
    information, and adds three columns to the data frame, each
    containing the transformed version of Market Cap column to
    respective currencies'''

    exchange_rate = pd.read_csv(csv_path).set_index('Currency')['Rate'].to_dict()
    df['MC_GBP_Billion'] = [np.round(x*exchange_rate['GBP'],2) for x in df['MC_USD_Billion']]
    df['MC_EUR_Billion'] = [np.round(x*exchange_rate['EUR'],2) for x in df['MC_USD_Billion']]
    df['MC_INR_Billion'] = [np.round(x*exchange_rate['INR'],2) for x in df['MC_USD_Billion']]

    return df

df = transform(df, 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-PY0221EN-Coursera/labs/v2/exchange_rate.csv')

def load_to_csv(df, output_csv_path):
    ''' This function saves the final data frame as a CSV file in
    the provided path. Function returns nothing.'''

    df.to_csv('./Largest_banks_data.csv')

load_to_csv(df, './Largest_banks_data.csv')

def load_to_db(df, sql_connection, table_name):
    ''' This function saves the final data frame to a database
    table with the provided name. Function returns nothing.'''
    
    conn = sqlite3.connect('Banks.db')
    df.to_sql(table_name, conn, if_exists='replace', index=False)
    

load_to_db(df, 'Banks.db', 'Largest_banks')

def run_query(query_statement, sql_connection):
    ''' This function runs the query on the database table and
    prints the output on the terminal. Function returns nothing. '''

    conn = sqlite3.connect(sql_connection)
    query_output = pd.read_sql(query_statement, conn)
    print(query_statement)
    print(query_output)

# Establish a connection outside the function
connection = sqlite3.connect('Banks.db')

run_query('SELECT * FROM Largest_banks', 'Banks.db')
run_query('SELECT AVG(MC_GBP_Billion) FROM Largest_banks', 'Banks.db')
run_query('SELECT Name from Largest_banks LIMIT 5', 'Banks.db')

''' Here, you define the required entities and call the relevant
functions in the correct order to complete the project. Note that this
portion is not inside any function.'''

url = 'https://web.archive.org/web/20230908091635 /https://en.wikipedia.org/wiki/List_of_largest_banks'
csv_path = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMSkillsNetwork-PY0221EN-Coursera/labs/v2/exchange_rate.csv'
table_attribs = ['Name', 'MC_USD_Billion']
final_attribs = ['Name', 'MC_USD_Billion', 'MC_GBP_Billion', 'MC_EUR_Billion', 'MC_INR_Billion']
output_csv_path = './Largest_banks_data.csv' 
db_name = 'Banks.db' 
table_name = 'Largest_banks'

# Log initisation of the ETL process
log_progress('Preliminaries complete. Initialising ETL process.')

# Log beginning of the extraction process
df = extract(url, table_attribs)
log_progress('Data extraction complete. Initiating Transformation process')

# Call transform function
df = transform(df, csv_path)
log_progress('Data transformation complete. Initiating Loading process')

# Call load_to_csv function
load_to_csv(df, output_csv_path)
log_progress('Data saved to CSV file') 

# Call load_to_db
load_to_db(df, db_name, table_name)
log_progress('Data loaded to Database as a table, Executing queries')

# Call run_query
run_query('SELECT * FROM Largest_banks', 'Banks.db')
run_query('SELECT AVG(MC_GBP_Billion) FROM Largest_banks', 'Banks.db')
run_query('SELECT Name from Largest_banks LIMIT 5', 'Banks.db')
log_progress('SQL queries completed')

# processing complete
log_progress('processing complete')






# Call load_to_db
load_to_db(df, db_name, table_name)
log_progress('Data loaded to Database as a table, Executing queries')

